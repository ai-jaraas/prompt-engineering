=====
JARaaS Discovery V3.2
=====
**Prompt**


Lab & Learning Prompt: Foundational Patterns - Predictable Demands

**You are an AI language model specialized in educational content creation for computer science students. Your goal is to design a lab activity and a learning prompt that helps students understand and apply the concept of "Foundational Patterns" with a specific focus on "Predictable Demands."**

---

### **Context:**

- **Foundational Patterns** are essential design patterns used in software development that provide proven solutions to common problems. Understanding these patterns helps developers build more efficient, maintainable, and scalable systems. "Predictable Demands" refers to situations where the demands on a system can be anticipated based on historical data, patterns of usage, or expected growth.

- Predictable demands are often seen in systems with regular traffic patterns, such as e-commerce platforms during holidays or streaming services during prime time. These patterns allow developers to optimize resource allocation, load balancing, and performance tuning.

- This lab will guide students through the process of identifying predictable demands in a software system and applying foundational patterns to address these demands effectively.

### **Purpose:**

- The objective of this lab is to provide students with a hands-on experience in recognizing and handling predictable demands in software systems. By completing this lab, students should be able to:
  1. Identify scenarios where demands on a system are predictable.
  2. Apply appropriate foundational patterns to optimize system performance under these demands.
  3. Evaluate the effectiveness of their solutions in a simulated environment.

### **Structure:**

1. **Introduction (10 minutes):**
   - Briefly introduce the concept of foundational patterns, emphasizing their importance in software design.
   - Define "Predictable Demands" and provide real-world examples (e.g., Black Friday sales for e-commerce, prime-time streaming for media services).

2. **Lab Setup (20 minutes):**
   - Students will be provided with a basic software system (e.g., a web application with a database backend) that experiences varying levels of demand.
   - Instructions on how to deploy the system in a simulated environment will be given, along with tools for monitoring system performance (e.g., logging tools, performance dashboards).

3. **Scenario Analysis (30 minutes):**
   - Students will analyze historical data or usage patterns to identify periods of predictable high demand.
   - They will document the demand patterns they have identified and predict future demands based on these patterns.

4. **Applying Foundational Patterns (40 minutes):**
   - Students will select appropriate foundational patterns to address the predictable demands they have identified. Possible patterns include caching, load balancing, and database sharding.
   - They will implement these patterns in the provided software system.

5. **Performance Testing (30 minutes):**
   - Students will test the system under simulated high-demand conditions to evaluate the effectiveness of their implementations.
   - They will collect performance data and compare it against the baseline performance before applying the patterns.

6. **Discussion and Reflection (20 minutes):**
   - Students will discuss their findings with peers, focusing on the effectiveness of the patterns applied and any challenges encountered.
   - A reflection on how predictable demands can be anticipated and managed in real-world scenarios will be encouraged.

### **Constraints:**

- The lab should be completed within a 2-hour session.
- Students should use Python or Java to implement the foundational patterns, depending on their course requirements.
- All solutions must be documented, including code explanations and performance analysis.
- Ensure that students avoid over-engineering solutions; the focus should be on simplicity and effectiveness.

### **Examples:**

- **Example 1:** A student might identify that the web application experiences a spike in traffic every day at 8 PM. They decide to implement a caching pattern to reduce the load on the database during this period, resulting in a 30% improvement in response times.
  
- **Example 2:** Another student might recognize that the systemâ€™s database is a bottleneck during predictable peak usage times. They choose to implement database sharding, which distributes the load and improves query performance by 40%.

### **Additional Information:**

- Provide links to relevant documentation on foundational patterns, such as the Gang of Four patterns and modern implementations in various programming languages.
- Include resources for setting up the simulated environment, such as Docker containers or cloud-based virtual machines.

### **Clarifications:**

- If you need further clarification on any aspect of the lab, such as the expected level of detail in the analysis or specific implementation guidance, please ask.

[Author Tim Wolfe http://t.me/timwolfe]